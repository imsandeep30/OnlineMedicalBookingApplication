// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineMedicineBookingApplication.Infrastructure;

#nullable disable

namespace OnlineMedicineBookingApplication.Infrastructure.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20250709090619_MedicineDetails")]
    partial class MedicineDetails
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdminPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            AdminEmail = "Admin@gmail.com",
                            AdminName = "admin",
                            AdminPassword = "Admin@123",
                            AdminPhone = "7093454577"
                        });
                });

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            MedicineId = 1,
                            Brand = "Crocin",
                            Description = "Used for fever and mild pain.",
                            ExpiryDate = new DateTime(2026, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Paracetamol",
                            Price = 20.00m,
                            QuantityAvailable = 100
                        },
                        new
                        {
                            MedicineId = 2,
                            Brand = "Mox",
                            Description = "Antibiotic for bacterial infections.",
                            ExpiryDate = new DateTime(2027, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Amoxicillin",
                            Price = 35.50m,
                            QuantityAvailable = 80
                        },
                        new
                        {
                            MedicineId = 3,
                            Brand = "Cetzine",
                            Description = "Used to treat allergies and cold symptoms.",
                            ExpiryDate = new DateTime(2026, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Cetirizine",
                            Price = 15.75m,
                            QuantityAvailable = 200
                        },
                        new
                        {
                            MedicineId = 4,
                            Brand = "Brufen",
                            Description = "Pain reliever and anti-inflammatory.",
                            ExpiryDate = new DateTime(2027, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Ibuprofen",
                            Price = 22.00m,
                            QuantityAvailable = 150
                        },
                        new
                        {
                            MedicineId = 5,
                            Brand = "Rantac",
                            Description = "Reduces stomach acid, used for acidity.",
                            ExpiryDate = new DateTime(2027, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Ranitidine",
                            Price = 18.00m,
                            QuantityAvailable = 130
                        },
                        new
                        {
                            MedicineId = 6,
                            Brand = "Dolo",
                            Description = "Used for fever and body pain relief.",
                            ExpiryDate = new DateTime(2026, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Dolo 650",
                            Price = 25.00m,
                            QuantityAvailable = 120
                        },
                        new
                        {
                            MedicineId = 7,
                            Brand = "Azithral",
                            Description = "Antibiotic used to treat bacterial infections.",
                            ExpiryDate = new DateTime(2027, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Azithromycin",
                            Price = 55.00m,
                            QuantityAvailable = 90
                        },
                        new
                        {
                            MedicineId = 8,
                            Brand = "Electral",
                            Description = "Used to prevent dehydration.",
                            ExpiryDate = new DateTime(2027, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "ORS Powder",
                            Price = 10.00m,
                            QuantityAvailable = 300
                        },
                        new
                        {
                            MedicineId = 9,
                            Brand = "Pantocid",
                            Description = "Reduces stomach acid, used for ulcers and GERD.",
                            ExpiryDate = new DateTime(2027, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Pantoprazole",
                            Price = 30.00m,
                            QuantityAvailable = 110
                        },
                        new
                        {
                            MedicineId = 10,
                            Brand = "Asthalin",
                            Description = "Used for asthma and breathing issues.",
                            ExpiryDate = new DateTime(2027, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Salbutamol Inhaler",
                            Price = 150.00m,
                            QuantityAvailable = 50
                        });
                });

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.Pharmacist", b =>
                {
                    b.Property<int>("PharmacistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacistId"));

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PharmacistEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacistName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PharmacistPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PharmacistPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PharmacistId");

                    b.ToTable("Pharmacists");

                    b.HasData(
                        new
                        {
                            PharmacistId = 1,
                            IsApproved = true,
                            Location = "Hyderabad",
                            PharmacistEmail = "Pharamacist123@gmail.com",
                            PharmacistName = "Pharmacist",
                            PharmacistPassword = "Pharamacist@123",
                            PharmacistPhone = "7093454577",
                            PharmacyName = "Appolo"
                        });
                });

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            UserEmail = "User@gmail.com",
                            UserName = "user",
                            UserPassword = "Test@123",
                            UserPhone = "7093454577"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
