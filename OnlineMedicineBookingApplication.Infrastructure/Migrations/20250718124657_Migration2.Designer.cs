// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineMedicineBookingApplication.Infrastructure.DBContext;

#nullable disable

namespace OnlineMedicineBookingApplication.Infrastructure.Migrations
{
    [DbContext(typeof(MedicineAppContext))]
    [Migration("20250718124657_Migration2")]
    partial class Migration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<bool>("presecptionRequired")
                        .HasColumnType("bit");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            MedicineId = 1,
                            Brand = "Crocin",
                            Description = "Used for fever and mild pain.",
                            ExpiryDate = new DateTime(2026, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Paracetamol",
                            Price = 20.00m,
                            QuantityAvailable = 100,
                            presecptionRequired = false
                        },
                        new
                        {
                            MedicineId = 2,
                            Brand = "Mox",
                            Description = "Antibiotic for bacterial infections.",
                            ExpiryDate = new DateTime(2027, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Amoxicillin",
                            Price = 35.50m,
                            QuantityAvailable = 80,
                            presecptionRequired = false
                        },
                        new
                        {
                            MedicineId = 3,
                            Brand = "Cetzine",
                            Description = "Used to treat allergies and cold symptoms.",
                            ExpiryDate = new DateTime(2026, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Cetirizine",
                            Price = 15.75m,
                            QuantityAvailable = 200,
                            presecptionRequired = false
                        },
                        new
                        {
                            MedicineId = 4,
                            Brand = "Brufen",
                            Description = "Pain reliever and anti-inflammatory.",
                            ExpiryDate = new DateTime(2027, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Ibuprofen",
                            Price = 22.00m,
                            QuantityAvailable = 150,
                            presecptionRequired = false
                        },
                        new
                        {
                            MedicineId = 5,
                            Brand = "Rantac",
                            Description = "Reduces stomach acid, used for acidity.",
                            ExpiryDate = new DateTime(2027, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Ranitidine",
                            Price = 18.00m,
                            QuantityAvailable = 130,
                            presecptionRequired = false
                        },
                        new
                        {
                            MedicineId = 6,
                            Brand = "Dolo",
                            Description = "Used for fever and body pain relief.",
                            ExpiryDate = new DateTime(2026, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Dolo 650",
                            Price = 25.00m,
                            QuantityAvailable = 120,
                            presecptionRequired = false
                        },
                        new
                        {
                            MedicineId = 7,
                            Brand = "Azithral",
                            Description = "Antibiotic used to treat bacterial infections.",
                            ExpiryDate = new DateTime(2027, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Azithromycin",
                            Price = 55.00m,
                            QuantityAvailable = 90,
                            presecptionRequired = false
                        },
                        new
                        {
                            MedicineId = 8,
                            Brand = "Electral",
                            Description = "Used to prevent dehydration.",
                            ExpiryDate = new DateTime(2027, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "ORS Powder",
                            Price = 10.00m,
                            QuantityAvailable = 300,
                            presecptionRequired = false
                        },
                        new
                        {
                            MedicineId = 9,
                            Brand = "Pantocid",
                            Description = "Reduces stomach acid, used for ulcers and GERD.",
                            ExpiryDate = new DateTime(2027, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Pantoprazole",
                            Price = 30.00m,
                            QuantityAvailable = 110,
                            presecptionRequired = false
                        },
                        new
                        {
                            MedicineId = 10,
                            Brand = "Asthalin",
                            Description = "Used for asthma and breathing issues.",
                            ExpiryDate = new DateTime(2027, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactureDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicineName = "Salbutamol Inhaler",
                            Price = 150.00m,
                            QuantityAvailable = 50,
                            presecptionRequired = false
                        });
                });

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.HasIndex("OrderId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Role = "User",
                            UserEmail = "User@gmail.com",
                            UserName = "user",
                            UserPassword = "Test@123",
                            UserPhone = "7093454577"
                        },
                        new
                        {
                            UserId = 2,
                            Role = "Admin",
                            UserEmail = "admin@gmial.com",
                            UserName = "admin",
                            UserPassword = "Admin@123",
                            UserPhone = "7093454577"
                        });
                });

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("OnlineMedicineBookingApplication.Domain.Entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.Order", b =>
                {
                    b.HasOne("OnlineMedicineBookingApplication.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("OnlineMedicineBookingApplication.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineMedicineBookingApplication.Domain.Entities.Cart", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
